class LRUCache {

    static class Node{
      int key;
      int value;
      Node prev;
      Node next;
      Node(int key, int value){
        this.key = key;
        this.value = value;
      }
    }

    private final int capacity;
    private Node head;
    private Node tail;
    Map<Integer, Node> map;

    public LRUCache(int capacity) {
        this.capacity = capacity;
        this.map = new HashMap<>();
    }

    public int get(int key) {
      if (!map.containsKey(key)){
        return -1;
      }else {
        Node node = map.get(key);
        remove(node);
        add(node);
        return node.value;
      }
    }

    public void put(int key, int value) {
      Node node = new Node(key, value);
      if (map.containsKey(key)){
        remove(map.get(key));
      }else if (map.size() == capacity){
        remove(tail);
      }
      add(node);
    }

    public void remove(Node node){
        map.remove(node.key);
        if(node.next != null) {
          node.next.prev= node.prev;
        }
        if(node.prev != null) {
          node.prev.next = node.next;
        }
        if (node == head){
          head = head.next;
        }
        if (node == tail){
          tail = tail.prev;
        }
        node.next = node.prev = null;
    }

    public void add(Node node){
      map.put(node.key, node);
      if (head == null){
        head = tail = node;
      }else{
        node.next = head;
        head.prev = node;
        head = node;
      }
    }
}
